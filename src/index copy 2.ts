import * as fs from "fs";
import * as http from "http";

const home = (request: http.IncomingMessage, response: http.ServerResponse) => {
  if (request.url === "/") {
    response.writeHead(200);
    response.write("Response generated by Node.js server");
    response.end();
  }
  return;
};

const api = (request: http.IncomingMessage, response: http.ServerResponse) => {
  if (request.url === "/api") {
    response.writeHead(200);
    response.write("API response generated by Node.js server");
    response.write("Copyright 2024");
    response.end();
  }
  return;
};

const user = (request: http.IncomingMessage, response: http.ServerResponse) => {
  if (request.url === "/user") {
    response.writeHead(200, { "content-type": "application/json" });
    response.write(
      JSON.stringify([{ user: "John Doe" }, { user: "Jane Doe" }])
    );
    response.end();
  }
  return;
};

const about = (
  request: http.IncomingMessage,
  response: http.ServerResponse
) => {
  if (request.url === "/about") {
    response.writeHead(200, { "content-type": "text/html" });
    response.write("<h1>About page</h1>");
    response.write("<p>This is the about page</p>");
    response.end("<footer>End of about page</footer>");
  }
  return;
};

const file = (request: http.IncomingMessage, response: http.ServerResponse) => {
  if (request.url === "/file") {
    response.writeHead(200, { "content-type": "application/pdf" });
    const pathScript = __dirname;
    const content = fs.readFileSync(`${pathScript}/manual.pdf`);
    response.write(content);
    response.end();
  }
  return;
};

const image = (
  request: http.IncomingMessage,
  response: http.ServerResponse
) => {
  if (request.url === "/image") {
    fs.readFile(`${__dirname}/paisaje.jpg`, (err, result) => {
      console.log("Result of readFile");
      if (err) {
        response.writeHead(404);
        response.end("Error reading image");
        return;
      }
      response.writeHead(200, { "content-type": "image/jpeg" });
      response.write(result);
      response.end();
    });
  }
  return;
};

const video = (
  request: http.IncomingMessage,
  response: http.ServerResponse
) => {
  if (request.url === "/video") {
    response.writeHead(200, { "content-type": "video/mp4" });
    const stream = fs.createReadStream(`${__dirname}/video.mp4`);
    stream.pipe(response);
  }
  return;
};

const serverHttp = (
  request: http.IncomingMessage,
  response: http.ServerResponse
) => {
  home(request, response);
  api(request, response);
  user(request, response);
  about(request, response);
  file(request, response);
  image(request, response);
  video(request, response);
};

const server = http.createServer(serverHttp);

server.listen(3000, () => {
  console.log("Server is listening on port 3000");
});
